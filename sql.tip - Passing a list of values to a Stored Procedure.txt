NOTE : Also check http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsqlmag01/html/TreatYourself.asp


The goal is to be able to do something similar to the following:

CODE
SELECT ... WHERE CustomerID IN @List

If you've tried it, you know by now that it doesn't work. If your list is the text string '2,5,7,42' then the above statement is essentially saying

CODE
SELECT ... WHERE CustomerID IN ('2,5,7,42')

--which is not the same thing as

SELECT ... WHERE CustomerID IN (2,5,7,42)

I put the code in the colors that Query Analyzer uses so you can quickly see the difference between how it interprets the two statements. The first has the list as a string (red), the second has them as separate number literals (black). The parser would be happy with integer variables separated by commas, but not a string variable.

So what do you do? Keep reading: I've got a function for you to easily get the job done.

Several other similar UDFs I've seen on the web have done special handling for spaces, trimming whitespace from input strings before parsing, and from output strings after parsing. Some have also ignored a lone trailing delimiter. I prefer to let the function user make such decisions. You of course can add your own modifications to make the function suit your needs, and I've included some ideas at the end on how to do this.

It is named Split in honor of the Visual Basic built-in function which has the same functionality. Usage examples are given after the function.

CODE
CREATE Function Split(
   @InputText Varchar(4000), -- The text to be split into rows
   @Delimiter Varchar(10)) -- The delimiter that separates tokens.
                           -- Can be multiple characters, or empty

RETURNS @Array TABLE (
   TokenID Int PRIMARY KEY IDENTITY(1,1), --Comment out this line if
                                          -- you don't want the
                                          -- identity column
   Value Varchar(4000))

AS

-----------------------------------------------------------
-- Function Split                                        --
--    • Returns a Varchar rowset from a delimited string --
-----------------------------------------------------------

BEGIN

   DECLARE
      @Pos Int,        -- Start of token or character
      @End Int,        -- End of token
      @TextLength Int, -- Length of input text
      @DelimLength Int -- Length of delimiter

-- Len ignores trailing spaces, thus the use of DataLength.
-- Note: if you switch to NVarchar output, you'll need to divide by 2.
   SET @TextLength = DataLength(@InputText)

-- Exit function if no text is passed in
   IF @TextLength = 0 RETURN

   SET @Pos = 1
   SET @DelimLength = DataLength(@Delimiter)

   IF @DelimLength = 0 BEGIN -- Each character in its own row
      WHILE @Pos <= @TextLength BEGIN
         INSERT @Array (Value) VALUES (SubString(@InputText,@Pos,1))
         SET @Pos = @Pos + 1
      END
   END
   ELSE BEGIN
      -- Tack on delimiter to 'see' the last token
      SET @InputText = @InputText + @Delimiter
      -- Find the end character of the first token
      SET @End = CharIndex(@Delimiter, @InputText)
      WHILE @End > 0 BEGIN
         -- End > 0, a delimiter was found: there is a(nother) token
         INSERT @Array (Value) VALUES (SubString(@InputText, @Pos, @End - @Pos))
         -- Set next search to start after the previous token
         SET @Pos = @End + @DelimLength
         -- Find the end character of the next token
         SET @End = CharIndex(@Delimiter, @InputText, @Pos)
      END
   END
   
   RETURN

END

GO

-----------------------------------------------------------
-- Usage Example 1: Simple SELECTs                       --
-----------------------------------------------------------

   SELECT TokenID, Value
      FROM dbo.Split('This function brought to you by Erik Eckhardt',' ')


   SELECT TokenID, Value
      FROM dbo.Split('abcdefghijklmnopqrstuvwxyz','')


-----------------------------------------------------------
-- For the next two examples, assume existence of        --
--    the table 'Customers'                              --
--    • with primary key field CustomerID and name field --
--      FullName                                         --
--    • and the variable @CustomerList contains a comma- --
--      separated list of desired Customer IDs.          --
--                                                       --
-- These examples will almost assuredly not run as is!   --
--                                                       --
-----------------------------------------------------------
-- Usage Example 2: JOIN                                 --
-----------------------------------------------------------

   SELECT CustomerID, FullName
      FROM Customers C
         INNER JOIN dbo.Split(@CustomerList,',') S
         ON C.CustomerID = S.Value  -- Implicit conversion to int
      ORDER BY S.TokenID


-----------------------------------------------------------
-- Usage Example 3: WHERE IN                             --
--    • The above join syntax *may* offer superior       --
--      performance on very large tables.                --
--    • But I've also included this WHERE IN syntax so   --
--      you can see how it is done.                      --
--    • This method does not allow you to order by       --
--      TokenID.                                         --
-----------------------------------------------------------

   SELECT CustomerID, FullName
      FROM Customers
      WHERE CustomerID IN (
         SELECT Value FROM dbo.Split(@CustomerList,',')
      )
   

-----------------------------------------------------------
-- Usage Example 4: JOIN (With Setup)                    --
--    • If you would like a more detailed example of how --
--      to use this function, here is code that does it  --
--      including setting up a temporary Customers table --
--      full of fake data.                               --
--    • It uses the same JOIN as example 2 above.        --
-----------------------------------------------------------
   
   CREATE TABLE #Customers (
      CustomerID Int PRIMARY KEY,
      FullName Varchar(60))
   
   INSERT INTO #Customers
      SELECT 1, 'Joe''s Landscaping And Goat Leasing' UNION
      SELECT 2, 'Hereford And Calves' UNION
      SELECT 3, 'Multiversal Pictures' UNION
      SELECT 4, 'Remote Control Peanut Butter Spreaders ''R'' Us' UNION
      SELECT 5, 'Rent-A-Spy' UNION
      SELECT 6, 'Whale Dairy Products, a Limited Liability Corporation'
   
   DECLARE @CustomerList Varchar(20)
   SET @CustomerList = '5,2,4'
   
   SELECT CustomerID, FullName
      FROM #Customers C
         INNER JOIN dbo.Split(@CustomerList,',') S
         ON C.CustomerID = S.Value
      ORDER BY S.TokenID
   
   DROP TABLE #Customers


-----------------------------------------------------------
-- Function Modification Ideas                           --
--    • I'll leave it to you to figure out how to        --
--      incorporate the suggestions into the function.   --
-----------------------------------------------------------

-- Ignore extra blanks
SET @InputText = LTrim(RTrim(@InputText))
INSERT @Array (Value) VALUES (LTrim(RTrim(SubString(@InputText, @Pos, @End - @Pos))))

-- Ignore a trailing delimiter
IF Right(@InputText, @DelimLength) <> @Delimiter SET @InputText = @InputText + @Delimiter

-- Do not return empty rows
IF @End - @Pos > 0 INSERT @Array (Value) VALUES (SubString(@InputText, @Pos, @End - @Pos))

-- Return a different data type
-- (See example 2, as conversion can also be implicit)
CREATE Function SplitInt(
   Value int
INSERT @Array (Value) VALUES (Convert(Int, SubString(@InputText, @Pos, @End - @Pos)))

