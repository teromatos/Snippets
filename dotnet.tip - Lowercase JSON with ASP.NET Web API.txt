URL=http://blog.alexonasp.net/post/2012/04/05/Lowercase-JSON-with-ASPNET-Web-API.aspx

When using JSON (especially when consuming it from JavaScript) it’s common to use lower case.

When returning JSON using ASP.NET Web API, the casing of the JSON generated by the formatters depends on the casing of your DTOs (you’re using DTOs, right?!) you’re returning using Web API.

In order to get always lower case JSON, the simplest way is to use the new JsonMediaTypeFormatter in ASP.NET Web API or the JsonNetFormatter from the WebApiContrib project both of which use Newtonsoft.Json to (de-)serialize JSON .

Independent of which you’re using, you can create lowercase JSON by providing a LowercaseContractResolver which is injected to the JSON serialization process:

public class LowercaseContractResolver : DefaultContractResolver {
	protected override string ResolvePropertyName(string propertyName) {
		return propertyName.ToLower();
	}
}

When using the official JsonMediaTypeFormatter, you can pass in the SerializerSettings this way:

var config = GlobalConfiguration.Configuration;
var settings = new JsonSerializerSettings();
settings.ContractResolver = new LowercaseContractResolver();
config.Formatters.JsonFormatter.SerializerSettings = settings;



When using the JsonNetFormatter from WebApiContrib, you can pass in the SerializerSettings this way:

var config = GlobalConfiguration.Configuration;
var settings = new JsonSerializerSettings();
settings.ContractResolver = new LowercaseContractResolver();
config.Formatters.Remove(config.Formatters.JsonFormatter);
config.Formatters.Add(new JsonNetFormatter(settings));