URL=http://beecy.net/post/2009/05/18/convert-generic-list-to-datatable-using-reflection.aspx

#region GenericListToDataTable 
/// <summary> 
/// Converts a generic List<> into a DataTable. 
/// </summary> 
/// <param name="list"></param> 
/// <returns>DataTable</returns> 
public static DataTable GenericListToDataTable(object list) 
{ 
    DataTable dt = null; 
    Type listType = list.GetType(); 
    if (listType.IsGenericType) 
    { 
        //determine the underlying type the List<> contains 
        Type elementType = listType.GetGenericArguments()[0]; 
  
        //create empty table -- give it a name in case 
        //it needs to be serialized 
        dt = new DataTable(elementType.Name + "List"); 
  
        //define the table -- add a column for each public 
        //property or field 
        MemberInfo[] miArray = elementType.GetMembers( 
            BindingFlags.Public | BindingFlags.Instance); 
        foreach (MemberInfo mi in miArray) 
        { 
            if (mi.MemberType == MemberTypes.Property) 
            { 
                PropertyInfo pi = mi as PropertyInfo; 
                dt.Columns.Add(pi.Name, pi.PropertyType); 
            } 
            else if (mi.MemberType == MemberTypes.Field) 
            { 
                FieldInfo fi = mi as FieldInfo; 
                dt.Columns.Add(fi.Name, fi.FieldType); 
            } 
        } 
  
        //populate the table 
        IList il = list as IList; 
        foreach (object record in il) 
        { 
            int i = 0; 
            object[] fieldValues = new object[dt.Columns.Count]; 
            foreach (DataColumn c in dt.Columns) 
            { 
                MemberInfo mi = elementType.GetMember(c.ColumnName)[0]; 
                if (mi.MemberType == MemberTypes.Property) 
                { 
                    PropertyInfo pi = mi as PropertyInfo; 
                    fieldValues[i] = pi.GetValue(record, null); 
                } 
                else if (mi.MemberType == MemberTypes.Field) 
                { 
                    FieldInfo fi = mi as FieldInfo; 
                    fieldValues[i] = fi.GetValue(record); 
                } 
                i++; 
            } 
            dt.Rows.Add(fieldValues); 
        } 
    } 
    return dt; 
} 
#endregion 
