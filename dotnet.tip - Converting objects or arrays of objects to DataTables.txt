URL= http://weblogs.asp.net/psperanza/archive/2005/05/18/407389.aspx

Converting objects or arrays of objects to DataTables 
Recently there have been some articles about not using DataSets or DataTables in web applications. Scott Mitchell has Why I Don't Use DataSets in My ASP.NET Applications and More On Why I Don't Use DataSets in My ASP.NET Applications. Karl Sequin has On the Way to Mastering ASP.NET: Introducing Custom Entity Classes. 

I prefer to use custom objects also, mostly because I like to abstract the database away from the client app. So I have this API with custom classes (fed from DataReaders) and a coworker wants to use my API to drive some reports. The only problem is the tool they are using doesn't work with arrays of objects. They say it needs DataSets, DataTables or DataReaders.

At first I started getting nervous but then I thought about it. DataSets and DataTables are fed from DataReaders. That's when I said to myself, "Self, you can feed DataSets and DataTables from your custom classes by using reflection." 

Now I am far from a Reflection guru, but all they need are column names,  data types and values. I can build DataColumns from the property info of classes dynamically using Reflection. The following code is my first pass. If anyone sees a way to improve on this then by all means, let's hear it.

using System;

using System.Data;

using System.Reflection;

using System.Reflection.Emit;

 

namespace ObjToAdo

{

        /// <summary>

        /// Summary description for Converter.

        /// </summary>

        public class Converter

        {

                private Converter()     {}

 

                /// <summary>

                /// 

                /// </summary>

                /// <param name="o"></param>

                /// <returns></returns>

                public static DataTable ConvertToDataTable(Object o)

                {       

                        PropertyInfo[] properties = o.GetType().GetProperties();

                        DataTable dt = CreateDataTable(properties);

                        FillData(properties, dt, o);

                        return dt;

                }

 

                /// <summary>

                /// 

                /// </summary>

                /// <param name="o"></param>

                /// <returns></returns>

                public static DataTable ConvertToDataTable(Object[] array)

                {

                        PropertyInfo[] properties = array.GetType().GetElementType().GetProperties();

                        DataTable dt = CreateDataTable(properties);

 

                        if (array.Length != 0)

                        {

                                foreach(object o in array)

                                        FillData(properties, dt, o);

 

                        }

 

                        return dt;

                }

 

                /// <summary>

                /// 

                /// </summary>

                /// <param name="properties"></param>

                /// <returns></returns>

                private static DataTable CreateDataTable(PropertyInfo[] properties)

                {

                        DataTable dt = new DataTable();

                        DataColumn dc = null;

 

                        foreach(PropertyInfo pi in properties)

                        {

                                dc = new DataColumn();

                                dc.ColumnName = pi.Name;

                                dc.DataType = pi.PropertyType;

                                

                                dt.Columns.Add(dc);                             

                        }

 

                        return dt;

                }

 

 

                /// <summary>

                /// 

                /// </summary>

                /// <param name="properties"></param>

                /// <param name="dt"></param>

                /// <param name="o"></param>

                private static void FillData(PropertyInfo[] properties, DataTable dt, Object o)

                {

                        DataRow dr = dt.NewRow();

 

                        foreach(PropertyInfo pi in properties)

                                dr[pi.Name] = pi.GetValue(o, null);

 

                        dt.Rows.Add(dr);        

                }

 

 

        }

}

 

